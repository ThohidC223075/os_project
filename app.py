# app.py
import streamlit as st
from scheduler import fcfs
import pandas as pd

st.set_page_config(page_title="CPU Scheduler", layout="centered")

st.title("üß† CPU Scheduling Visualizer - FCFS")

st.markdown("‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶è‡¶∞ ‡¶§‡¶•‡ßç‡¶Ø ‡¶®‡¶ø‡¶ö‡ßá ‡¶á‡¶®‡¶™‡ßÅ‡¶ü ‡¶¶‡¶æ‡¶ì:")

n = st.number_input("‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ", min_value=1, max_value=10, step=1)

process_data = []

for i in range(n):
    st.markdown(f"### ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ {i+1}")
    pid = f"P{i+1}"
    arrival_time = st.number_input(f"{pid} ‡¶è‡¶∞ Arrival Time", min_value=0, key=f"arrival{i}")
    burst_time = st.number_input(f"{pid} ‡¶è‡¶∞ Burst Time", min_value=1, key=f"burst{i}")
    process_data.append({"pid": pid, "arrival_time": arrival_time, "burst_time": burst_time})

if st.button("‚öôÔ∏è FCFS ‡¶ö‡¶æ‡¶≤‡¶æ‡¶ì"):
    result = fcfs(process_data)

    df = pd.DataFrame(result)
    st.subheader("üìä ‡¶™‡ßç‡¶∞‡¶∏‡ßá‡¶∏ ‡¶∏‡¶ø‡¶°‡¶ø‡¶â‡¶≤ ‡¶ü‡ßá‡¶¨‡¶ø‡¶≤")
    st.dataframe(df)

    avg_waiting_time = sum(p['Waiting Time'] for p in result) / len(result)
    avg_turnaround_time = sum(p['Turnaround Time'] for p in result) / len(result)

    st.markdown(f"### ‚è±Ô∏è ‡¶ó‡ßú ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ‡¶∞ ‡¶∏‡¶Æ‡ßü: `{avg_waiting_time:.2f}`")
    st.markdown(f"### üîÅ ‡¶ó‡ßú ‡¶ü‡¶æ‡¶∞‡ßç‡¶®-‡¶Ö‡ßç‡¶Ø‡¶æ‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶° ‡¶∏‡¶Æ‡ßü: `{avg_turnaround_time:.2f}`")

    st.subheader("üü¶ ‡¶ó‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶ü ‡¶ö‡¶æ‡¶∞‡ßç‡¶ü")
    chart = ""
    for p in result:
        chart += f"| {p['PID']} "
    chart += "|\n"
    for p in result:
        chart += f"{p['Start Time']}    "
    chart += f"{result[-1]['Completion Time']}"

    st.code(chart)
